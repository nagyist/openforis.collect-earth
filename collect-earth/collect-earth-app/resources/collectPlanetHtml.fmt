.<!DOCTYPE html>
<html ng-app="ce">

<head>
  <meta charset="utf-8" />
  <title>Planet Monthly basemaps</title>
  <script>
    document.write('<base href="' + document.location + '" />');
  </script>
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin=""></script>
  <script src="https://cdn.jsdelivr.net/gh/digidem/leaflet-side-by-side@gh-pages/leaflet-side-by-side.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="  crossorigin=""/>
  <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/angular_material/1.2.0/angular-material.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment-with-locales.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular-animate.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular-aria.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/angular_material/1.2.0/angular-material.min.js"></script>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.0/themes/smoothness/jquery-ui.css">
  <script>
	var boundaries = [
	// create a red polyline from an array of LatLng points
			<#list placemark.multiShape as shp>
             [
            	<#list shp as coord>
				[${coord.longitude},${coord.latitude}],
				</#list>
			]
			</#list>
			];


	var firstMonth  = 0;
	var firstYear  = 2009;

	var firstYearSelected = 2017;
	var firstMonthSelected = 7;

    var apiKey = "${planetMapsKey}"

	var today = new Date();

	var getFormattedDate = function( d ){
		const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
		const mo = new Intl.DateTimeFormat('en', { month: '2-digit' }).format(d);
		const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
		return ye+"-"+mo+"-"+da;
	}

	var getTileUrl = function( year, month, date, geometry){

		var startDay = new Date();
		startDay.setFullYear(year, month, date?date:1);
		var lastDay;
		if( date ){
			lastDay = new Date(startDay.getFullYear(), startDay.getMonth(), startDay.getDate() + 1);
		}else{
			lastDay = new Date(startDay.getFullYear(), startDay.getMonth() + 1, 0);
		}

		return $.ajax({
					type : "POST",
					url : "http://127.0.0.1:8028/earth/planetTileUrl",
					async : false,
					data : {
							start: getFormattedDate( startDay ),
							end : getFormattedDate( lastDay ),
							itemTypes : ["PSScene"], // , "REOrthoTile" RapidEye not working -- "PSScene3Band","PSScene4Band","REOrthoTile" have been deprecated
							geometry : JSON.stringify( geometry )
					},
					success : function( data ) {
						  	if( data === ""){
						  		alert("No imagery for the dates selected : " + getFormattedDate( startDay ) + " / " + getFormattedDate( lastDay ));
						  		return null;
						  	}
							return data;
					},
					error : function(data, textStatus, xhr) {
		                 //This shows status code eg. 403
		                 console.log("error", data.status);
		                 if( data.responseText.includes("401") ){
		                 	alert("Planet Authentication Error: Check that the Planet API Key used is correct in the Collect Earth properties dialog");
		                 }else{
		                 	alert("Error connecting to Planet servers " + data.responseText );
		                 }

						 return null;
		            }
				}
			).responseJSON;
	}

	var nextMonth = new Date();
	var prevMonth = new Date(today.setMonth(today.getMonth() -1 ));

	var lastMonth  =  nextMonth.getMonth();
	var lastYear  = nextMonth.getYear() + 1900;

	var lastMonthSelected  =  prevMonth.getMonth();
	var lastYearSelected  = prevMonth.getYear() + 1900;

	var datesAvailable;

  </script>
	<script>
	  var app = angular.module('ce', ['ngMaterial']);

	  app.controller('MainCtrl', function($scope) {

		  var monthFormat =  buildLocaleProvider("MMM-YYYY");
		  var ymdFormat =  buildLocaleProvider( "YYYY-MM-DD");
		  $scope.left = new Date( firstYearSelected, firstMonthSelected, 2 );

		  $scope.right = new Date( lastYearSelected, lastMonthSelected, 2 );

			function buildLocaleProvider(formatString) {
				return {
					formatDate: function (date) {
						if (date) return moment(date).format(formatString);
						else return null;
					},
					parseDate: function (dateString) {
						if (dateString) {
							var m = moment(dateString, formatString, true);
							return m.isValid() ? m.toDate() : new Date(NaN);
						}
						else return null;
					}
				};
			}


			function change( rightSide ) {
				if( sideBySide ){
					if( rightSide ){
						map.removeLayer( planetRightLayer);
						loadSingleSide( $scope.right.getFullYear(), $scope.right.getMonth() , $scope.right.getDate() ,true);
					}else{
						map.removeLayer( planetLeftLayer);
						loadSingleSide( $scope.left.getFullYear(), $scope.left.getMonth() , $scope.left.getDate() ,false);
					}
				}else{
					sideBySide = loadSideBySide(
						$scope.left.getFullYear(), $scope.left.getMonth(),
						$scope.right.getFullYear(), $scope.right.getMonth()
					)
				}
			}

		  $scope.change = change;


		  $scope.dateFields = [
						{
							type: 'date',
							required: false,
							binding: 'applicant.expectedGraduation',
							startView: 'month',
							label: 'Imagery Calendar',
							mode: 'date',
							locale: monthFormat,
							startDate : new Date( firstYear, firstMonth, 1),
							endDate : new Date( lastYear, lastMonth, 1),
							}
			];

			$scope.filterMonth = function( date ){
				console.log( "TRUE" + date  );
				return true;
			}

			$scope.filterDate = function( date ){
				var day = date.getDate();
				var month = date.getMonth() +1;
				var year = date.getFullYear();
		    	var key = year + "" + ( month<10?"0"+month:month );
				key = key + ( day<10?"0"+day:day );
				return datesAvailable === undefined || datesAvailable[ key ] !== undefined; // return true if the datesAvailable variable has not been initialized
			}


			var getMonthsWithImagery = function( geometry){

				var startDay = new Date();
				startDay.setFullYear(firstYear, firstMonth, 1);

				$.ajax({
							type : "POST",
							url : "http://127.0.0.1:8028/earth/planetAvailableImagery",
							async : true,
							data : {
									start: getFormattedDate( startDay ),
									end : getFormattedDate( new Date() ),
									itemTypes : ["PSScene"], // , "REOrthoTile" RapidEye not working -- "PSScene3Band","PSScene4Band","REOrthoTile" have been deprecated
									geometry : JSON.stringify( geometry )
							},
							success : function( data ) {
									datesAvailable = data;
									$scope.filterMonth = function( date ){
										var month = date.getMonth() +1;
										var year = date.getFullYear();
										var key = year + "" + ( month<10?"0"+month:month );
										return( datesAvailable[ key ] !== undefined );
									}
							},
							error : function(data, textStatus, xhr) {
								 //This shows status code eg. 403
								 console.log("error", data.status);
								 if( data.responseText.includes("401") ){
									alert("Planet Authentication Error: Check that the Planet API Key used is correct in the Collect Earth properties dialog");
								 }else{
									alert("Error connecting to Planet servers " + data.responseText );
								 }

								 return null;
							}
						}
					);;
			}

			getMonthsWithImagery( boundaries );

			});




	</script>
      <style>
    body {
        margin: 0;
        padding: 0;
    }

    #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
		z-index: 1;
    }

	.controller-left {
		position: absolute;
		bottom: 0px;
		left : 15px;
		width: 15%;
		height: 100px;
		z-index: 100;
		align: left;
	}

	.controller-right {
		position: absolute;
		bottom: 0px;
		right: 15px;
		width: 15%;
		height: 100px;
		z-index: 100;
		align: right;

	}

	.background {
		background-color: yellow;
		opacity: 0.5;
	}

	.LockOn {
		display: block;
		visibility: visible;
		position: absolute;
		z-index: 999;
		top: 0px;
		left: 0px;
		width: 105%;
		height: 105%;
		background-color:white;
		vertical-align:bottom;
		padding-top: 20%;
		filter: alpha(opacity=75);
		opacity: 0.82;
		font-size:large;
		color:blue;
		font-style:italic;
		font-weight:400;
		background-image: url("http://www.openforis.org/fileadmin/docs/collectEarth/pic/png/of_collectEarth_logo_vertical.png");
		background-repeat: no-repeat;
		background-attachment: fixed;
		background-position: center;
	}

    </style>
</head>

<body layout="row" layout-wrap flex layout-fill layout-align="start start" ng-controller="MainCtrl">
<div id="coverScreen" class="LockOn"></div>
	<div id='map' style="z-index: 1;"></div>
	<div  class="controller-left">

	<md-input-container flex="100" layout="column">
	<div class="background">
          <div style="font-size: 10px; color: blue;" label ng-bind="::dateFields[0].label"></div>

          <md-datepicker ng-model="left"
                     ng-required="dateFields[0].required"
                     md-date-locale="dateFields[0].locale"
                     md-mode="{{dateFields[0].mode}}"
                     md-open-on-focus="true"
					 ng-change="change(false)"
					 md-min-date="dateFields[0].startDate"
					 md-max-date="dateFields[0].endDate"
					 md-open-on-focus
					 md-month-filter="filterMonth"
					 md-date-filter="filterDate"
					 >
        </md-datepicker>
		</div>
    </md-input-container>

	</div>


    <div  class="controller-right">

	<md-input-container flex="100" layout="column">
	<div class="background">
          <div style="font-size: 10px; color: blue;" label ng-bind="::dateFields[0].label"></div>

                    <md-datepicker ng-model="right"
                     ng-required="dateFields[0].required"
                     md-date-locale="dateFields[0].locale"
                     md-mode="{{dateFields[0].mode}}"
                     md-open-on-focus="true"
					 ng-change="change(true)"
					 md-min-date="dateFields[0].startDate"
					 md-max-date="dateFields[0].endDate"
					 md-open-on-focus
					 md-month-filter="filterMonth"
					 md-date-filter="filterDate"
					 >
        </md-datepicker>
		</div>
    </md-input-container>

	</div>

    <script>

    var map;

	map = L.map('map');

    var latlngs = [
	// create a red polyline from an array of LatLng points
			<#list placemark.multiShape as shp>
             [
            	<#list shp as coord>
				[${coord.latitude},${coord.longitude}],
				</#list>
			],
			</#list>
           <#list placemark.points as square>
 				[
			     <#list square.shape as squareCorners>
			           [${squareCorners.latitude},${squareCorners.longitude}],
			     </#list>
		     	],
		     	<#if square.points?? >
					<#list square.points as innerpoint>
					[
						<#list innerpoint.shape as squareCorners>
					  [${squareCorners.latitude},${squareCorners.longitude}],
						</#list>
					],
					</#list>
				</#if>
		    </#list>
	];



    var polyline = L.polyline(latlngs, {color: 'yellow'}).addTo(map);
	// Or center on the polygon
	var center = polyline.getBounds().getCenter()
	map.setView(center, 17)
	var sideBySide;
	var planetLeftLayer;
	var planetRightLayer;

	var loadSideBySide = function( leftYear, leftMonth, rightYear, rightMonth){

		planetLeftLayer = L.tileLayer(
		    getTileUrl(leftYear, leftMonth, null, boundaries),
		{
			attribution: 'Planet 2021',
		}).addTo(map);

		planetRightLayer = L.tileLayer(
			getTileUrl(rightYear, rightMonth, null, boundaries),
		{
			attribution: 'Planet 2021',
		}).addTo(map);

		return L.control.sideBySide(planetLeftLayer, planetRightLayer).addTo(map);
	}

	var loadSingleSide = function( year, month, date, rightSide){

		var planetLayer = L.tileLayer(
		    getTileUrl(year, month, date, boundaries),
		{
			attribution: 'Planet 2021',
		}).addTo(map);

		if( rightSide ){
			sideBySide.setRightLayers( planetLayer ).addTo(map);
		}else{
			sideBySide.setLeftLayers( planetLayer ).addTo(map);
		}
	}

	$( document ).ready( function(){
		$("#coverScreen").show();

		var monthBefore = new Date( (new Date() ).setMonth(today.getMonth() -1 ));

		sideBySide = loadSideBySide( firstYearSelected, firstMonthSelected, monthBefore.getYear() + 1900, monthBefore.getMonth()+1 );
		$("#coverScreen").hide();
	});

    </script>
</body>

</html>
